@use "sass:math";
@use "sass:color";
@use "sass:meta";

// -------------------
//
// Sass APCA
//
// Implementation of the [Accessible Perceptual Contrast Algorithm (APCA)](https://git.apcacontrast.com/) for the WCAG 3.0 specification.
//
// -------------------

// Powercurve exponents
$_Strc: 2.4;
$_Ntx: 0.57;
$_Nbg: 0.56;
$_Rtx: 0.62;
$_Rbg: 0.65;

// Clamps and scalers
$_Bclip: 1.414;
$_Bthrsh: 0.022;
$_Wscale: 1.14;
$_Woffset: 0.027;
$_Wclamp: 0.1;

// Multipliers
$_redMultiplier: 0.2126729;
$_greenMultiplier: 0.7151522;
$_blueMultiplier: 0.072175;

@function _luminance($color) {
  $red: color.red($color);
  $green: color.green($color);
  $blue: color.blue($color);

  $redLuminance: math.pow(math.div($red, 255), $_Strc) * $_redMultiplier;
  $greenLuminance: math.pow(math.div($green, 255), $_Strc) * $_greenMultiplier;
  $blueLuminance: math.pow(math.div($blue, 255), $_Strc) * $_blueMultiplier;

  @return $redLuminance + $greenLuminance + $blueLuminance;
}

@function _softClip($luminance) {
  @if ($luminance < 0) {
    @return 0;
  } @else if ($luminance < $_Bthrsh) {
    @return $luminance + math.pow(($_Bthrsh - $luminance), $_Bclip);
  } @else {
    @return $luminance;
  }
}

@function _polarity($textColor, $backgroundColor) {
  $Ytxt: _softClip(_luminance($textColor));
  $Ybg: _softClip(_luminance($backgroundColor));

  @if ($Ybg > $Ytxt) {
    @return (math.pow($Ybg, $_Nbg) - math.pow($Ytxt, $_Ntx)) * $_Wscale;
  } @else {
    @return (math.pow($Ybg, $_Rbg) - math.pow($Ytxt, $_Rtx)) * $_Wscale;
  }
}

/**
 * Determine the lightness contrast of a given text and background color using the
 * APC algorithm
 *
 * @param   {color}  $textColor        Text color
 * @param   {color}  $backgroundColor  Background color
 *
 * @return  {number}                    A number between -108 and 107 representing the lightness contrast 
 */
@function contrast($textColor, $backgroundColor) {
  @if (meta.type-of($textColor) != 'color') {
    @error "Type Error: apca.contrast expects a color as first argument but received #{meta.type-of($textColor)}. Please provide a valid color.";
  }

  @if (meta.type-of($backgroundColor) != 'color') {
    @error "Type Error: apca.contrast expects a color as second argument but received #{meta.type-of($backgroundColor)}. Please provide a valid color.";
  }

  $polarity: _polarity($textColor, $backgroundColor);

  @if (math.abs($polarity) < $_Wclamp) {
    @return 0;
  } @else if ($polarity > 0) {
    @return ($polarity - $_Woffset) * 100;
  } @else {
    @return ($polarity + $_Woffset) * 100;
  }
}
